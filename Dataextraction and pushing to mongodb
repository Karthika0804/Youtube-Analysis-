from googleapiclient.discovery import build
import pandas as pd
from googleapiclient.errors import HttpError
import json
import re
***********************************************
api_key="your api_key"
api_service_name = "youtube"
api_version = "v3"
youtube =build(api_service_name, api_version, developerKey= api_key)
**************************************************
# Function for one channel info
channel_id="corresponding channel_id"
def get_channel_stats(youtube,channel_id):
    request = youtube.channels().list(
                part='snippet,contentDetails,statistics',
                id=channel_id)
    response = request.execute() 
    data = dict(Channel_name = response['items'][0]['snippet']['title'],
                    Subscribers = response['items'][0]['statistics']['subscriberCount'],
                    Views = response['items'][0]['statistics']['viewCount'],
                    Total_videos = response['items'][0]['statistics']['videoCount']
                   
            )
    return data
channel_details = get_channel_stats(youtube,channel_id)
channel_details
*****************************************************************************************
# Function to get video_ids
playlist_id="corresponding channel_id"
def get_video_ids(youtube,channel_id):
    video_ids = []
    request = youtube.playlistItems().list(
        part="snippet,contentDetails",
        playlistId=playlist_id,
        maxResults = 50
    )
    response = request.execute()
    
    for item in response['items']:
        video_ids.append(item['contentDetails']['videoId'])
        next_page_token = response.get('nextPageToken')
    while next_page_token is not None:
        request = youtube.playlistItems().list(
                    part='contentDetails',
                    playlistId = playlist_id,
                    maxResults = 50,
                    pageToken = next_page_token)
        response = request.execute()

        for item in response['items']:
            video_ids.append(item['contentDetails']['videoId'])
            next_page_token = response.get('nextPageToken')
        
    return (video_ids)
video_ids= get_video_ids(youtube,playlist_id)
video_ids
***************************************************************************************
# Function to get video details
def get_video_details(youtube, video_ids):
   all_video_info = []
    
    for i in range(0, len(video_ids), 50):
        request = youtube.videos().list(
            part="snippet,contentDetails,statistics",
            id=','.join(video_ids[i:i+50])
        )
        response = request.execute() 

        for video in response['items']:
            stats_to_keep = {'snippet': ['channelTitle', 'title', 'description', 'tags', 'publishedAt'],
                             'statistics': ['viewCount', 'likeCount', 'favouriteCount', 'commentCount'],
                             'contentDetails': ['duration', 'definition', 'caption']
                            }
            video_info = {}
            video_info['video_id'] = video['id']

            for k in stats_to_keep.keys():
                for v in stats_to_keep[k]:
                    try:
                        video_info[v] = video[k][v]
                    except:
                        video_info[v] = None

            all_video_info.append(video_info)
            
    return(all_video_info)
video_df=get_video_details(youtube, video_ids)
video_df
*********************************************************************************
#Function get comment details
def get_comments_in_videos(youtube, video_ids):
   all_comments = []
    
    for video_id in video_ids:
        try:   
            request = youtube.commentThreads().list(
                part="snippet,replies",
                videoId=video_id
            )
            response = request.execute()
        
            comments_in_video = [comment['snippet']['topLevelComment']['snippet']['textOriginal'] for comment in response['items'][0:10]]
            comments_in_video_info = {'video_id': video_id, 'comments': comments_in_video}

            all_comments.append(comments_in_video_info)
            
        except: 
            # When error occurs - most likely because comments are disabled on a video
            print('Could not get comments for video ' + video_id)
        
    return(all_comments)     
comment_df=get_comments_in_videos(youtube, video_ids)
comment_df
**********************************************************************************************************************************************
#Final data pushing
data = {'channel_details' : channel_details,
            'video_ids' : video_ids,
            'video_details' : video_df,
            'comment_details' : comment_df
               }
print(data)
****************************************************************************************
#connection MongoDB with Python
pip install pymongo
import pymongo
client = pymongo.MongoClient("mongodb://localhost:27017")
mydb =client["your database name"]
information = mydb.data
information.insert_one(data)
**********************************************************************************************************************
#connection Mysql with MongoDB




